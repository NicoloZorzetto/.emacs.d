:tangle yes
#+AUTHOR: Nicolò Zorzetto
#+TITLE: Emacs Config

* Packages
** Add reos and initialize.
Adding these 2 repos seems to solve package-install problems in MacOS. Maybe it's only me, but leaving them will not cause problems nor slow down the startup by a lot.
Melpa is the default one and adding the gnu repo is a bit unorthodox but in Fedora just the first didn't list all packages available so I had to add the latter.
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)
#+END_SRC

#+RESULTS:

** Use package
The use-package macro allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy. I created it because I have over 80 packages that I use in Emacs, and things were getting difficult to manage. Yet with this utility my total load time is around 2 seconds, with no loss of functionality!
#+BEGIN_SRC emacs-lisp
(package-install 'use-package)
#+END_SRC

#+RESULTS:
: ‘use-package’ is already installed

** Elpy
Elpy is a package that renders Emacs almost a Python IDE.
#+BEGIN_SRC emacs-lisp
  (use-package elpy
  ;; :config
  ;; ;; Hook to start elpy when in python mode (visiting a python file or buffer)
  ;; (add-hook 'python-mode-hook (lambda ()
  ;; (elpy-enable)))
  ;; ;; Set Ipython's envoirment
  ;; ;; (setq python-shell-interpreter "jupyter"
  ;; ;; python-shell-interpreter-args "console --simple-prompt"
  ;; ;; python-shell-prompt-detect-failure-warning nil)
  ;; (add-to-list 'python-shell-completion-native-disabled-interpreters
  ;; "jupyter")
  ;; (elpy-enable))
)
#+END_SRC

#+RESULTS:
: t

** Dashboard
The initial buffer.
#+BEGIN_SRC emacs-lisp
  ;; (use-package dashboard
  ;; :ensure t
  ;; :config
  ;; (setq dashboard-banner-logo-title "Welcome back, Nicolò")
  ;; (setq dashboard-center-content t)
  ;; (setq dashboard-set-heading-icons t)
  ;; (setq dashboard-set-file-icons t)
  ;; (setq dashboard-set-footer nil)
  ;; (dashboard-setup-startup-hook))
#+END_SRC

#+RESULTS:
: t
*** Page break lines

#+BEGIN_SRC
(use-package page-break-lines
:ensure t
:config
(turn-on-page-break-lines-mode))
#+END_SRC
** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
:config
(global-set-key (kbd "C-g") 'magit))
#+END_SRC

#+RESULTS:

** Ivy
*** Ivy
Ivy is an interactive interface for completion in Emacs. Emacs uses completion mechanism in a variety of contexts: code, menus, commands, variables, functions, etc. Completion entails listing, sorting, filtering, previewing, and applying actions on selected items. When active, ivy-mode completes the selection process by narrowing available choices while previewing in the minibuffer. Selecting the final candidate is either through simple keyboard character inputs or through powerful regular expressions.
[[https://github.com/Microsoft/ivy][Ivy github repo]
[[https://oremacs.com/swiper/][Ivy official documentation]]
#+BEGIN_SRC emacs-lisp
(use-package ivy
:config
;; This allows minibuffer commands while inside the minibuffer. I believe my Ivy settings use it quite a bit.
(setq enable-recursive-minibuffers t)
;; This adds bookmarks and recent files to 'ivy-switch-buffer'. This adds a bit of initial load time but is pretty useful in my opinion.
(setq ivy-use-virtual-buffers t)
;; Counsel-minibuffer-history will show the minibuffer commands history. The keybinding only works when inside the minibuffer.
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
;; Consel-M-x is Ivy's version of 'execute-extended-command'. 
(global-set-key (kbd "M-x") 'counsel-M-x)
;; Counsel-find-file add Ivy completion to find-file.
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
;; Consel-find-library opens the minibuffer listing all available libraries (often associated with packages) and lets you search and select one opening it's source code.
(global-set-key (kbd "<f1> l") 'counsel-find-library)
;; Consel-describe-function opens the minibuffer listing all available functions and opens the documentation page for the one you select.
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
;; Consel-describe-variable opens the minibuffer listing all available variables and opens the documentation page for the one you select.
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;; Consel-describe-symbol opens the minibuffer listing all available symbols and opens the documentation page for the one you select.
(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
;; Ivy-resume allows you to get back where you left the last ivy completion.
(global-set-key (kbd "<f6>") 'ivy-resume)
:init
;; This activates Ivy
(ivy-mode 1))
#+END_SRC

#+RESULTS:
: t

*** Counsel
Consuel is a collection of Ivy enhanced emacs commands.
[[https://github.com/Microsoft/ivy][Ivy github repo]]
[[https://oremacs.com/swiper/][Ivy official documentation]]
#+BEGIN_SRC emacs-lisp
(package-install 'counsel)
#+END_SRC

#+RESULTS:
: ‘counsel’ is already installed

*** Swiper
Swiper is an an Ivy enhanced Isearch replacement.
[[https://github.com/Microsoft/ivy][Ivy github repo]]
[[https://oremacs.com/swiper/][Ivy official documentation]]
#+BEGIN_SRC emacs-lisp
(use-package swiper
:config
(global-set-key (kbd "C-s") 'swiper))
#+END_SRC
** Writeromm
I have long wanted a sort of 'zen-mode' for emacs to integrate in my workflow so to have a super minimal and distraction free envoirment to relax while writing or sometimes coding.
writeroom-mode adds just that to Emacs, emulating the famous OSX editor of the same name. It is not perfect but I believe I can make it more so thru configuration and hooks.
The repo doesn't appear to be the original but seems to still get updates since the other's last commit is from 2015.
[[https://github.com/joostkremers/writeroom-mode][Writeroom-mode github repo]]
*** Installation
#+BEGIN_SRC emacs-lisp
(use-package writeroom-mode
:config
(global-set-key (kbd "C-x C-w") 'writeroom-mode))
#+END_SRC

#+RESULTS:
: t

** PDF tools
PDF-tools is a package that let's you view PDF files (and more) inside Emacs.
Midnight mode actively changes the colors of PDFs to be homougenous with the theme you have loaded. 
I added a hook to activate it automatically since I use pdf-tools mainly to read books or documents. If you need to see the original colors just disable it manually with < /C-c C-r m/ >.
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
:config
(add-hook 'PDFView-mode-hook (lambda ()
                                (pdf-view-midnight-minor-mode)))
(pdf-tools-install))
#+END_SRC

#+RESULTS:
: t

** EMMS
EMMS is a super minimalistic music player inside emacs. It is standardly launched with the command < /M-x RET emms RET/ >.
#+BEGIN_SRC emacs-lisp
(package-install 'emms)

(use-package emms
:config 
;;Midnight mode actively changes the colors of PDFs to be homougenous with the theme you have loaded. I added a hook to activate it automatically since I use pdf-tools mainly to read books or documents. If you need to see the original colors just disable it manually with < /C-c C-r m/ >.
(global-set-key (kbd "C-c C-x C-e") 'emms)
;; I have binded /add directory/ to < /C-c C-+/ >. This function opens the minubuffer prompting for a directory and add to emms all music files contained in it.
(global-set-key (kbd "C-c C-+") 'emms-add-directory)
;; Player config
(setq exec-path (append exec-path '("/usr/local/bin")))
(add-to-list 'load-path "~/.emacs.d/site-lisp/emms/lisp")
(require 'emms-setup)
(require 'emms-player-mplayer)
(emms-standard)
(emms-default-players)
(define-emms-simple-player mplayer '(file url)
      (regexp-opt '(".ogg" ".mp3" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
                    ".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" "http://" "mms://"
                    ".rm" ".rmvb" ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"))
      "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen"))
#+END_SRC

#+RESULTS:
: t
* Visual settings
** Hide the menubar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
#+END_SRC

#+RESULTS:

** Hide the toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
#+END_SRC

#+RESULTS:

** Show line numbers (kbd toggle)
Line numbers are not shown by default so I added a toggle keybinding to show/hide them with < /C-x C-l/ >
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-l") 'global-display-line-numbers-mode)
#+END_SRC

#+RESULTS:
: global-display-line-numbers-mode

** Visual line mode
Visual line mode makes line-dependent commands act on visual lines instead of logical ones (so separating wrapped lines). 
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC

#+RESULTS:
: t

** [theme] spacemacs-dark
Simple and pretty minimal theme that works well with my DWM config.
#+BEGIN_SRC emacs-lisp
(load-theme 'poet-dark t)
#+END_SRC

#+RESULTS:
: t

* Org-mode settings
** Agenda settings
*** Set agenda files
#+BEGIN_SRC emacs-lisp
(require 'org)
(setq org-agenda-files (list "~/Documents/org/agenda.org"))
#+END_SRC

#+RESULTS:
: ~/Documents/org/agenda.org

*** Agenda KBD
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-a") 'org-agenda)
#+END_SRC

#+RESULTS:
: org-agenda

* Keybindings specific to Italian Keyboards
Using the Italian keyboard layout and emacs can be troublesome. 
In GNU/Linux systems these are taken care of by default, with the exception of the tidle ("~"),  but in MacOS and Windows(?) they are noy. 
Leaving these even if you run GNU/Linux should not cause any problem or warning.
If you use another layout simply put your curson on the "* Keybindings specific to Italian Keyboards" line and press "C-c C-x C-w" to delete the whole entry. This also works with any entry in any org-document.
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html][Manual article on keybindings]]
** Insert "~"
On italian keyboards the tidle ("~") is inserted with 'Alt+5'. This command makes it possible to do so.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-5") "~")
#+END_SRC
** Insert "#"
On italian keyboards the pound sign, also called octothorpe or hashtag, ("#") is inserted with 'Alt+à'. This command makes it possible to do so.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-à") "#")
#+END_SRC
** Insert "[" and "]"
On italian keyboards the square parentheses are inserted with 'Alt+è' or 'Alt++'. This command makes it possible to do so.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-è") "[")
(global-set-key (kbd "M-+") "]")
#+END_SRC
** Insert "{" and "}"
On italian keyboards the curly parentheses are inserted with 'Alt+é' or 'Alt+*'. This command makes it possible to do so.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-é") "{")
(global-set-key (kbd "M-*") "}")
#+END_SRC
** Insert "@"
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-ò") "@")
#+END_SRC

#+RESULTS:
: @

* Misc

#+BEGIN_SRC emacs-lisp
  ;; (defun dashboard-refresh-buffer ()
  ;;   (when (get-buffer dashboard-buffer-name)
  ;;     (kill-buffer dashboard-buffer-name))
  ;;   (dashboard-insert-startupify-lists)
  ;;   (switch-to-buffer dashboard-buffer-name))
#+END_SRC

#+RESULTS:
: t
** Set backup files directory to /temp/
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
`((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
`((".*" ,temporary-file-directory t)))
#+END_SRC

#+RESULTS:
| .* | /tmp/ | t |
** Tab setup

#+BEGIN_SRC emacs-lisp
(setq tab-width 4)
(setq indent-tabs-mode t)
#+END_SRC

#+RESULTS:
: t
*** Python

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
  (lambda ()
    (setq indent-tabs-mode t)
    (setq python-indent-offset 8)
    (setq tab-width 4)))
#+END_SRC

#+RESULTS:
| lambda | nil | (setq indent-tabs-mode t) | (setq python-indent 8) | (setq tab-width 4) |
